import { gql } from '@apollo/client';
import { apolloClient } from '@/api/common/apollo-client';

export enum FeeType { TUITION='TUITION', REGISTRATION='REGISTRATION', EXAMINATION='EXAMINATION', LIBRARY='LIBRARY', LABORATORY='LABORATORY', SPORTS='SPORTS', TRANSPORT='TRANSPORT', MEALS='MEALS', UNIFORM='UNIFORM', TECHNOLOGY='TECHNOLOGY', EXTRACURRICULAR='EXTRACURRICULAR', OTHER='OTHER' }
export enum FeeStatus { PENDING='PENDING', PAID='PAID', PARTIALLY_PAID='PARTIALLY_PAID', OVERDUE='OVERDUE', WAIVED='WAIVED', REFUNDED='REFUNDED', CANCELLED='CANCELLED' }
export enum FeeFrequency { ONE_TIME='ONE_TIME', DAILY='DAILY', WEEKLY='WEEKLY', MONTHLY='MONTHLY', QUARTERLY='QUARTERLY', SEMESTER='SEMESTER', ANNUALLY='ANNUALLY' }

export interface Fee { id: string; listingId: string; name: string; description?: string; type: FeeType; amount: number; currency: string; frequency: FeeFrequency; dueDate: string; isRecurring: boolean; recurringInterval?: number; recurringUnit?: 'DAYS'|'WEEKS'|'MONTHS'|'YEARS'; maxOccurrences?: number; isActive: boolean; isMandatory: boolean; lateFeeAmount?: number; lateFeePercentage?: number; gracePeriod?: number; discountAmount?: number; discountPercentage?: number; earlyPaymentDiscount?: number; earlyPaymentDeadline?: string; installmentPlan?: { numberOfInstallments: number; installmentAmount: number; installmentInterval: number; installmentUnit: 'DAYS'|'WEEKS'|'MONTHS' }; metadata: Record<string, any>; createdAt: string; updatedAt: string; listing?: { id: string; title: string } }
export interface FeeTransaction { id: string; feeId: string; userId: string; listingId: string; amount: number; currency: string; status: FeeStatus; paymentMethod: string; paymentProvider: string; transactionReference: string; paymentDate: string; dueDate: string; lateFeeAmount: number; discountAmount: number; totalAmount: number; notes?: string; receiptUrl?: string; metadata: Record<string, any>; createdAt: string; updatedAt: string; fee?: Fee; user?: { id: string; name: string; email: string }; listing?: { id: string; title: string } }

export interface CreateFeeInput { listingId: string; name: string; description?: string; type: FeeType; amount: number; currency: string; frequency: FeeFrequency; dueDate: string; isRecurring?: boolean; recurringInterval?: number; recurringUnit?: 'DAYS'|'WEEKS'|'MONTHS'|'YEARS'; maxOccurrences?: number; isActive?: boolean; isMandatory?: boolean; lateFeeAmount?: number; lateFeePercentage?: number; gracePeriod?: number; discountAmount?: number; discountPercentage?: number; earlyPaymentDiscount?: number; earlyPaymentDeadline?: string; installmentPlan?: { numberOfInstallments: number; installmentAmount: number; installmentInterval: number; installmentUnit: 'DAYS'|'WEEKS'|'MONTHS' }; metadata?: Record<string, any> }
export interface UpdateFeeInput { id: string; name?: string; description?: string; type?: FeeType; amount?: number; currency?: string; frequency?: FeeFrequency; dueDate?: string; isRecurring?: boolean; recurringInterval?: number; recurringUnit?: 'DAYS'|'WEEKS'|'MONTHS'|'YEARS'; maxOccurrences?: number; isActive?: boolean; isMandatory?: boolean; lateFeeAmount?: number; lateFeePercentage?: number; gracePeriod?: number; discountAmount?: number; discountPercentage?: number; earlyPaymentDiscount?: number; earlyPaymentDeadline?: string; installmentPlan?: { numberOfInstallments: number; installmentAmount: number; installmentInterval: number; installmentUnit: 'DAYS'|'WEEKS'|'MONTHS' }; metadata?: Record<string, any> }
export interface CreateFeeTransactionInput { feeId: string; userId: string; listingId: string; amount: number; currency: string; paymentMethod: string; paymentProvider: string; transactionReference: string; paymentDate: string; dueDate: string; lateFeeAmount?: number; discountAmount?: number; notes?: string; receiptUrl?: string; metadata?: Record<string, any> }
export interface UpdateFeeTransactionInput { id: string; status?: FeeStatus; amount?: number; lateFeeAmount?: number; discountAmount?: number; notes?: string; receiptUrl?: string; metadata?: Record<string, any> }

export interface FeeFilterInput { listingId?: string; type?: FeeType; isActive?: boolean; isMandatory?: boolean; minAmount?: number; maxAmount?: number; currency?: string; dueDate?: string; isRecurring?: boolean }
export interface FeeTransactionFilterInput { feeId?: string; userId?: string; listingId?: string; status?: FeeStatus; paymentMethod?: string; paymentProvider?: string; minAmount?: number; maxAmount?: number; currency?: string; startDate?: string; endDate?: string; isOverdue?: boolean }
export interface FeeSortInput { field?: 'name'|'amount'|'dueDate'|'createdAt'|'updatedAt'; order?: 'ASC'|'DESC' }
export interface FeeTransactionSortInput { field?: 'amount'|'paymentDate'|'dueDate'|'createdAt'|'updatedAt'; order?: 'ASC'|'DESC' }

export interface FeeSummary { totalFees: number; activeFees: number; mandatoryFees: number; totalAmount: number; averageAmount: number; feesByType: Array<{ type: FeeType; count: number; totalAmount: number; percentage: number }>; feesByFrequency: Array<{ frequency: FeeFrequency; count: number; percentage: number }>; overdueFees: Array<{ feeId: string; name: string; amount: number; daysOverdue: number }> }
export interface FeeTransactionSummary { totalTransactions: number; successfulTransactions: number; failedTransactions: number; pendingTransactions: number; totalAmount: number; averageAmount: number; successRate: number; transactionsByStatus: Array<{ status: FeeStatus; count: number; percentage: number }>; transactionsByMethod: Array<{ method: string; count: number; percentage: number }>; transactionsByProvider: Array<{ provider: string; count: number; percentage: number }>; dailyStats: Array<{ date: string; count: number; amount: number; successRate: number }> }

const FEE_FRAGMENT = gql`fragment FeeFragment on Fee { id listingId name description type amount currency frequency dueDate isRecurring recurringInterval recurringUnit maxOccurrences isActive isMandatory lateFeeAmount lateFeePercentage gracePeriod discountAmount discountPercentage earlyPaymentDiscount earlyPaymentDeadline installmentPlan { numberOfInstallments installmentAmount installmentInterval installmentUnit } metadata createdAt updatedAt listing { id title } }`;
const FEE_TRANSACTION_FRAGMENT = gql`fragment FeeTransactionFragment on FeeTransaction { id feeId userId listingId amount currency status paymentMethod paymentProvider transactionReference paymentDate dueDate lateFeeAmount discountAmount totalAmount notes receiptUrl metadata createdAt updatedAt fee { ...FeeFragment } user { id name email } listing { id title } } ${FEE_FRAGMENT}`;

const GET_FEES_QUERY = gql`${FEE_FRAGMENT} query GetFees($filter: FeeFilterInput, $sort: FeeSortInput, $limit: Int, $offset: Int) { getFees(filter: $filter, sort: $sort, limit: $limit, offset: $offset) { ...FeeFragment } }`;
const GET_FEE_BY_ID_QUERY = gql`${FEE_FRAGMENT} query GetFeeById($id: String!) { getFeeById(id: $id) { ...FeeFragment } }`;
const GET_FEES_BY_LISTING_QUERY = gql`${FEE_FRAGMENT} query GetFeesByListing($listingId: String!, $filter: FeeFilterInput) { getFeesByListing(listingId: $listingId, filter: $filter) { ...FeeFragment } }`;
const GET_FEE_TRANSACTIONS_QUERY = gql`${FEE_TRANSACTION_FRAGMENT} query GetFeeTransactions($filter: FeeTransactionFilterInput, $sort: FeeTransactionSortInput, $limit: Int, $offset: Int) { getFeeTransactions(filter: $filter, sort: $sort, limit: $limit, offset: $offset) { ...FeeTransactionFragment } }`;
const GET_FEE_TRANSACTION_BY_ID_QUERY = gql`${FEE_TRANSACTION_FRAGMENT} query GetFeeTransactionById($id: String!) { getFeeTransactionById(id: $id) { ...FeeTransactionFragment } }`;
const GET_FEE_TRANSACTIONS_BY_USER_QUERY = gql`${FEE_TRANSACTION_FRAGMENT} query GetFeeTransactionsByUser($userId: String!, $filter: FeeTransactionFilterInput) { getFeeTransactionsByUser(userId: $userId, filter: $filter) { ...FeeTransactionFragment } }`;
const GET_FEE_TRANSACTIONS_BY_FEE_QUERY = gql`${FEE_TRANSACTION_FRAGMENT} query GetFeeTransactionsByFee($feeId: String!, $filter: FeeTransactionFilterInput) { getFeeTransactionsByFee(feeId: $feeId, filter: $filter) { ...FeeTransactionFragment } }`;
const GET_FEE_SUMMARY_QUERY = gql`query GetFeeSummary($listingId: String) { getFeeSummary(listingId: $listingId) { totalFees activeFees mandatoryFees totalAmount averageAmount feesByType { type count totalAmount percentage } feesByFrequency { frequency count percentage } overdueFees { feeId name amount daysOverdue } } }`;
const GET_FEE_TRANSACTION_SUMMARY_QUERY = gql`query GetFeeTransactionSummary($timeRange: AnalyticsTimeRangeInput) { getFeeTransactionSummary(timeRange: $timeRange) { totalTransactions successfulTransactions failedTransactions pendingTransactions totalAmount averageAmount successRate transactionsByStatus { status count percentage } transactionsByMethod { method count percentage } transactionsByProvider { provider count percentage } dailyStats { date count amount successRate } } }`;

const CREATE_FEE_MUTATION = gql`${FEE_FRAGMENT} mutation CreateFee($input: CreateFeeInput!) { createFee(input: $input) { ...FeeFragment } }`;
const UPDATE_FEE_MUTATION = gql`${FEE_FRAGMENT} mutation UpdateFee($input: UpdateFeeInput!) { updateFee(input: $input) { ...FeeFragment } }`;
const DELETE_FEE_MUTATION = gql`mutation DeleteFee($id: String!) { deleteFee(id: $id) }`;
const CREATE_FEE_TRANSACTION_MUTATION = gql`${FEE_TRANSACTION_FRAGMENT} mutation CreateFeeTransaction($input: CreateFeeTransactionInput!) { createFeeTransaction(input: $input) { ...FeeTransactionFragment } }`;
const UPDATE_FEE_TRANSACTION_MUTATION = gql`${FEE_TRANSACTION_FRAGMENT} mutation UpdateFeeTransaction($input: UpdateFeeTransactionInput!) { updateFeeTransaction(input: $input) { ...FeeTransactionFragment } }`;
const DELETE_FEE_TRANSACTION_MUTATION = gql`mutation DeleteFeeTransaction($id: String!) { deleteFeeTransaction(id: $id) }`;
const PROCESS_FEE_PAYMENT_MUTATION = gql`${FEE_TRANSACTION_FRAGMENT} mutation ProcessFeePayment($feeId: String!, $userId: String!, $paymentData: PaymentDataInput!) { processFeePayment(feeId: $feeId, userId: $userId, paymentData: $paymentData) { ...FeeTransactionFragment } }`;
const REFUND_FEE_TRANSACTION_MUTATION = gql`${FEE_TRANSACTION_FRAGMENT} mutation RefundFeeTransaction($id: String!, $amount: Float, $reason: String) { refundFeeTransaction(id: $id, amount: $amount, reason: $reason) { ...FeeTransactionFragment } }`;

export async function getFees(filter?: FeeFilterInput, sort?: FeeSortInput, limit?: number, offset?: number, accessToken?: string): Promise<Fee[]> { const { data } = await apolloClient.query({ query: GET_FEES_QUERY, variables: { filter, sort, limit, offset }, context: { headers: { Authorization: `Bearer ${accessToken}` } } }); return data.getFees || [] }
export async function getFeeById(id: string, accessToken?: string): Promise<Fee | null> { const { data } = await apolloClient.query({ query: GET_FEE_BY_ID_QUERY, variables: { id }, context: { headers: { Authorization: `Bearer ${accessToken}` } } }); return data.getFeeById || null }
export async function getFeesByListing(listingId: string, filter?: FeeFilterInput, accessToken?: string): Promise<Fee[]> { const { data } = await apolloClient.query({ query: GET_FEES_BY_LISTING_QUERY, variables: { listingId, filter }, context: { headers: { Authorization: `Bearer ${accessToken}` } } }); return data.getFeesByListing || [] }
export async function getFeeTransactions(filter?: FeeTransactionFilterInput, sort?: FeeTransactionSortInput, limit?: number, offset?: number, accessToken?: string): Promise<FeeTransaction[]> { const { data } = await apolloClient.query({ query: GET_FEE_TRANSACTIONS_QUERY, variables: { filter, sort, limit, offset }, context: { headers: { Authorization: `Bearer ${accessToken}` } } }); return data.getFeeTransactions || [] }
export async function getFeeTransactionById(id: string, accessToken?: string): Promise<FeeTransaction | null> { const { data } = await apolloClient.query({ query: GET_FEE_TRANSACTION_BY_ID_QUERY, variables: { id }, context: { headers: { Authorization: `Bearer ${accessToken}` } } }); return data.getFeeTransactionById || null }
export async function getFeeTransactionsByUser(userId: string, filter?: FeeTransactionFilterInput, accessToken?: string): Promise<FeeTransaction[]> { const { data } = await apolloClient.query({ query: GET_FEE_TRANSACTIONS_BY_USER_QUERY, variables: { userId, filter }, context: { headers: { Authorization: `Bearer ${accessToken}` } } }); return data.getFeeTransactionsByUser || [] }
export async function getFeeTransactionsByFee(feeId: string, filter?: FeeTransactionFilterInput, accessToken?: string): Promise<FeeTransaction[]> { const { data } = await apolloClient.query({ query: GET_FEE_TRANSACTIONS_BY_FEE_QUERY, variables: { feeId, filter }, context: { headers: { Authorization: `Bearer ${accessToken}` } } }); return data.getFeeTransactionsByFee || [] }
export async function getFeeSummary(listingId?: string, accessToken?: string): Promise<FeeSummary> { const { data } = await apolloClient.query({ query: GET_FEE_SUMMARY_QUERY, variables: { listingId }, context: { headers: { Authorization: `Bearer ${accessToken}` } } }); return data.getFeeSummary }
export async function getFeeTransactionSummary(timeRange?: any, accessToken?: string): Promise<FeeTransactionSummary> { const { data } = await apolloClient.query({ query: GET_FEE_TRANSACTION_SUMMARY_QUERY, variables: { timeRange }, context: { headers: { Authorization: `Bearer ${accessToken}` } } }); return data.getFeeTransactionSummary }
export async function createFee(input: CreateFeeInput, accessToken?: string): Promise<Fee> { const { data } = await apolloClient.mutate({ mutation: CREATE_FEE_MUTATION, variables: { input }, context: { headers: { Authorization: `Bearer ${accessToken}` } } }); return data.createFee }
export async function updateFee(input: UpdateFeeInput, accessToken?: string): Promise<Fee> { const { data } = await apolloClient.mutate({ mutation: UPDATE_FEE_MUTATION, variables: { input }, context: { headers: { Authorization: `Bearer ${accessToken}` } } }); return data.updateFee }
export async function deleteFee(id: string, accessToken?: string): Promise<boolean> { const { data } = await apolloClient.mutate({ mutation: DELETE_FEE_MUTATION, variables: { id }, context: { headers: { Authorization: `Bearer ${accessToken}` } } }); return data.deleteFee }
export async function createFeeTransaction(input: CreateFeeTransactionInput, accessToken?: string): Promise<FeeTransaction> { const { data } = await apolloClient.mutate({ mutation: CREATE_FEE_TRANSACTION_MUTATION, variables: { input }, context: { headers: { Authorization: `Bearer ${accessToken}` } } }); return data.createFeeTransaction }
export async function updateFeeTransaction(input: UpdateFeeTransactionInput, accessToken?: string): Promise<FeeTransaction> { const { data } = await apolloClient.mutate({ mutation: UPDATE_FEE_TRANSACTION_MUTATION, variables: { input }, context: { headers: { Authorization: `Bearer ${accessToken}` } } }); return data.updateFeeTransaction }
export async function deleteFeeTransaction(id: string, accessToken?: string): Promise<boolean> { const { data } = await apolloClient.mutate({ mutation: DELETE_FEE_TRANSACTION_MUTATION, variables: { id }, context: { headers: { Authorization: `Bearer ${accessToken}` } } }); return data.deleteFeeTransaction }
export async function processFeePayment(feeId: string, userId: string, paymentData: any, accessToken?: string): Promise<FeeTransaction> { const { data } = await apolloClient.mutate({ mutation: PROCESS_FEE_PAYMENT_MUTATION, variables: { feeId, userId, paymentData }, context: { headers: { Authorization: `Bearer ${accessToken}` } } }); return data.processFeePayment }
export async function refundFeeTransaction(id: string, amount?: number, reason?: string, accessToken?: string): Promise<FeeTransaction> { const { data } = await apolloClient.mutate({ mutation: REFUND_FEE_TRANSACTION_MUTATION, variables: { id, amount, reason }, context: { headers: { Authorization: `Bearer ${accessToken}` } } }); return data.refundFeeTransaction }

export function getFeeTypeColor(type: FeeType): string { switch (type) { case FeeType.TUITION: return 'bg-blue-100 text-blue-800'; case FeeType.REGISTRATION: return 'bg-green-100 text-green-800'; case FeeType.EXAMINATION: return 'bg-purple-100 text-purple-800'; case FeeType.LIBRARY: return 'bg-indigo-100 text-indigo-800'; case FeeType.LABORATORY: return 'bg-orange-100 text-orange-800'; case FeeType.SPORTS: return 'bg-pink-100 text-pink-800'; case FeeType.TRANSPORT: return 'bg-yellow-100 text-yellow-800'; case FeeType.MEALS: return 'bg-red-100 text-red-800'; case FeeType.UNIFORM: return 'bg-teal-100 text-teal-800'; case FeeType.TECHNOLOGY: return 'bg-cyan-100 text-cyan-800'; case FeeType.EXTRACURRICULAR: return 'bg-emerald-100 text-emerald-800'; default: return 'bg-gray-100 text-gray-800' } }
export function getFeeStatusColor(status: FeeStatus): string { switch (status) { case FeeStatus.PAID: return 'bg-green-100 text-green-800'; case FeeStatus.PENDING: return 'bg-yellow-100 text-yellow-800'; case FeeStatus.PARTIALLY_PAID: return 'bg-blue-100 text-blue-800'; case FeeStatus.OVERDUE: return 'bg-red-100 text-red-800'; case FeeStatus.WAIVED: return 'bg-gray-100 text-gray-800'; case FeeStatus.REFUNDED: return 'bg-purple-100 text-purple-800'; case FeeStatus.CANCELLED: return 'bg-gray-100 text-gray-800'; default: return 'bg-gray-100 text-gray-800' } }
export function getFeeFrequencyColor(frequency: FeeFrequency): string { switch (frequency) { case FeeFrequency.ONE_TIME: return 'bg-gray-100 text-gray-800'; case FeeFrequency.DAILY: return 'bg-red-100 text-red-800'; case FeeFrequency.WEEKLY: return 'bg-orange-100 text-orange-800'; case FeeFrequency.MONTHLY: return 'bg-yellow-100 text-yellow-800'; case FeeFrequency.QUARTERLY: return 'bg-blue-100 text-blue-800'; case FeeFrequency.SEMESTER: return 'bg-indigo-100 text-indigo-800'; case FeeFrequency.ANNUALLY: return 'bg-purple-100 text-purple-800'; default: return 'bg-gray-100 text-gray-800' } }
export function formatFeeAmount(amount: number, currency: string = 'UGX'): string { return new Intl.NumberFormat('en-US', { style: 'currency', currency: currency.toUpperCase(), minimumFractionDigits: 2, maximumFractionDigits: 2 }).format(amount) }
export function calculateLateFee(amount: number, lateFeeAmount?: number, lateFeePercentage?: number): number { if (lateFeeAmount) return lateFeeAmount; if (lateFeePercentage) return (amount * lateFeePercentage) / 100; return 0 }
export function calculateDiscount(amount: number, discountAmount?: number, discountPercentage?: number): number { if (discountAmount) return discountAmount; if (discountPercentage) return (amount * discountPercentage) / 100; return 0 }
export function isFeeOverdue(dueDate: string, gracePeriod: number = 0): boolean { const due = new Date(dueDate); const now = new Date(); const gracePeriodMs = gracePeriod * 24 * 60 * 60 * 1000; return now.getTime() > (due.getTime() + gracePeriodMs) }
export function getDaysOverdue(dueDate: string, gracePeriod: number = 0): number { if (!isFeeOverdue(dueDate, gracePeriod)) return 0; const due = new Date(dueDate); const now = new Date(); const gracePeriodMs = gracePeriod * 24 * 60 * 60 * 1000; const overdueMs = now.getTime() - (due.getTime() + gracePeriodMs); return Math.ceil(overdueMs / (24 * 60 * 60 * 1000)) }
export function canProcessPayment(fee: Fee, userId: string): boolean { return fee.isActive && !isFeeOverdue(fee.dueDate, fee.gracePeriod) }
export function getFeeTypeIcon(type: FeeType): string { switch (type) { case FeeType.TUITION: return '🎓'; case FeeType.REGISTRATION: return '📝'; case FeeType.EXAMINATION: return '📋'; case FeeType.LIBRARY: return '📚'; case FeeType.LABORATORY: return '🧪'; case FeeType.SPORTS: return '⚽'; case FeeType.TRANSPORT: return '🚌'; case FeeType.MEALS: return '🍽️'; case FeeType.UNIFORM: return '👕'; case FeeType.TECHNOLOGY: return '💻'; case FeeType.EXTRACURRICULAR: return '🎨'; default: return '💰' } }
export function getFeeFrequencyIcon(frequency: FeeFrequency): string { return '📅' }


